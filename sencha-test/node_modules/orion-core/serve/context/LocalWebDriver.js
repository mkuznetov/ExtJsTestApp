ST.webdriverBrowser = true;

ST.context.LocalWebDriver = ST.define({
    extend: ST.context.Local,

    constructor: function (config) {
        var me = this;

        ST.context.LocalWebDriver.superclass.constructor.call(this, config);
    },

    createPlayable: function (event) {
        var playable = ST.context.LocalWebDriver.superclass.createPlayable(event),
            related;

        if (playable) {
            playable.future = this._createInstance(event.futureClsName);
            ST.apply(playable.future, event.future);
        }

        // do some translation of dom elements into ST.Elements
        if (event.webElement) {
            playable.targetEl = ST.fly(event.webElement, 'playable');
        }
        if (event.future) {
            if (event.future.webElement) {
                playable.future.el = ST.fly(event.future.webElement, 'future');
                if (playable.future._attach) {
                    playable.future._attach(); // setup this.future.cmp
                }
            }
            related = event.future.related;
            for (var name in related) {
                var relatedConfig = related[name],
                    relatedClsName = relatedConfig.futureClsName,
                    relatedFuture;

                if (relatedConfig.isFuture) {
                    relatedFuture = relatedConfig;
                } else {
                    relatedFuture = this._createInstance(relatedClsName, {});
                    relatedFuture.el = new ST.Element(relatedConfig.webElement);
                    relatedFuture.data = relatedConfig.data;
                    if (relatedFuture._attach) {
                        relatedFuture._attach();
                    }
                }
                
                playable.future.setRelated(name, relatedFuture);
            }
            if (event.future.locator) {
                playable.future.locator = new ST.playable.Playable({
                    targetEl: ST.fly(event.future.locator.webElement, 'locator'),
                    locatorChain: event.future.locator.locatorChain
                });
            }
        }

        if (event.target && event.target.webElement) {
            playable.target = new ST.playable.Playable({
                targetEl: ST.fly(event.target.webElement, 'target'),
                locatorChain: event.target.locatorChain
            });
        }

        return playable;
    },

    isLocalWebDriverContext: true
});

if (!ST.defaultContext) {
    ST.defaultContext = new ST.context.LocalWebDriver();
}

